{"/home/travis/build/npmtest/node-npmtest-express-node-metrics/test.js":"/* istanbul instrument in package npmtest_express_node_metrics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-node-metrics/lib.npmtest_express_node_metrics.js":"/* istanbul instrument in package npmtest_express_node_metrics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_node_metrics = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_node_metrics = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-node-metrics/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-node-metrics && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_node_metrics */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_node_metrics\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_node_metrics.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_node_metrics.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_node_metrics.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_node_metrics.__dirname + '/lib.npmtest_express_node_metrics.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-node-metrics/node_modules/express-node-metrics/index.js":"module.exports.middleware = require('./src/middleware');\nmodule.exports.metrics = require('./src/metrics');","/home/travis/build/npmtest/node-npmtest-express-node-metrics/node_modules/express-node-metrics/src/middleware.js":"'use strict';\nvar metrics = require('./metrics'),\n    helper = require('./helper');\n\n/**\n * middleware for express in order to add start time and decorate the end method\n * at the end it will add the data to the metrics\n * @param {any} req\n * @param {any} res\n * @param {any} next\n */\nmodule.exports = function (req, res, next) {\n    req.startTime = new Date();\n    metrics.incrementCustomMetric(\"process.run.activeRequests\");\n    // decorate response#end method from express\n    var end = res.end;\n    res.end = function () {\n        var responseTime = new Date() - req.startTime\n\n        try {\n            res.setHeader('X-Response-Time', responseTime + 'ms');\n        } catch(error){\n            // This Try/Catch was added to handle error \"Can't set headers after they are sent.” \n            // which is thrown when using Restify  \n            // TODO: Log error\n        }\n\n        // call to original express#res.end()\n        end.apply(res, arguments);\n\n        if (!helper.shouldAddMetrics(req)){\n            var route = helper.getRoute(req);\n\n            var apiData = {\n                route: route,\n                method: req.method,\n                status: res.statusCode,\n                time: responseTime\n            }\n            \n            metrics.addApiData(apiData);\n        }\n\n        metrics.decrementCustomMetric(\"process.run.activeRequests\");\n    };\n\n    next();\n};","/home/travis/build/npmtest/node-npmtest-express-node-metrics/node_modules/express-node-metrics/src/metrics.js":"'use strict';\nvar measured = require('measured');\nvar stats = measured.createCollection();\nvar gc = (require('gc-stats'))();\nvar eventLoopStats = require(\"event-loop-stats\");\nvar memwatch = require('memwatch-next');\nvar schedule = require('node-schedule');\nvar usage = require('pidusage');\nvar metricsFactory = require('./factory');\nvar trackedMetrics = {};\nvar interval = 1000; // how often to refresh our measurement\nvar cpuUsage;\nvar gcLastRun;\n\nvar customMetrics = {};\nvar customMetersMetrics = new Set();\nvar endpointsLastResponseTime = {};\n\nvar CATEGORIES = {\n  all: 'global.all',\n  statuses: 'statuses',\n  methods: 'methods',\n  endpoints: 'endpoints'\n};\n\nvar NAMESPACES = {\n  process: 'process',\n  internalMetrics: 'internalMetrics',\n  apiMetrics: 'apiMetrics',\n  endpoints: 'endpoints'\n}\n\nvar cpuUsageScheduleJob;\n\nmodule.exports.incrementCustomMetric = function (metricName) {\n  let counter = addMetric(metricName, \"Counter\");\n  counter.inc();\n}\n\nmodule.exports.decrementCustomMetric = function (metricName) {\n  let counter = addMetric(metricName, \"Counter\");\n  counter.dec();\n}\n\nmodule.exports.addCustomGaugeMetric = function (metricName, metricValue) {\n  customMetrics[metricName] = metricValue;\n\n  let gaugeFunction;\n  if (typeof metricValue === 'function') {\n    gaugeFunction = function () {\n      return customMetrics[metricName]();\n    }\n  } else {\n    gaugeFunction = function () {\n      return customMetrics[metricName];\n    }\n  }\n\n  addMetric(metricName, \"Gauge\", gaugeFunction);\n}\n\nmodule.exports.addCustomMeterMetric = function (metricName) {\n  customMetersMetrics.add(metricName);\n  let meter = addMetric(metricName, \"Meter\");\n  meter.mark();\n}\n\nmodule.exports.getAll = function (reset) {\n  var metricsAsJson = JSON.stringify(trackedMetrics);\n  if (reset) {\n    resetAll();\n  }\n  return metricsAsJson;\n}\n\nmodule.exports.processMetrics = function (reset) {\n  var metricsAsJson = JSON.stringify(trackedMetrics[NAMESPACES.process]);\n  if (reset)\n    resetProcessMetrics();\n  return metricsAsJson;\n}\n\nmodule.exports.apiMetrics = function (reset) {\n  var metricsAsJson = JSON.stringify(trackedMetrics[NAMESPACES.apiMetrics]);\n  if (reset)\n    resetMetric(NAMESPACES.apiMetrics);\n  return metricsAsJson;\n}\n\nmodule.exports.endPointMetrics = function (reset) {\n  var metricsAsJson = JSON.stringify(trackedMetrics[NAMESPACES.endpoints]);\n  if (reset) {\n    resetMetric(NAMESPACES.endpoints);\n  }\n  return metricsAsJson;\n}\n\nmodule.exports.internalMetrics = function (reset) {\n  var metricsAsJson = JSON.stringify(trackedMetrics[NAMESPACES.internalMetrics]);\n  if (reset)\n    resetMetric(NAMESPACES.internalMetrics);\n  return metricsAsJson;\n}\n\nmodule.exports.logInternalMetric = function (info, err) {\n  var status = \"success\";\n\n  if (err) {\n    status = \"failure\";\n  }\n\n  addInnerIO({\n    destination: info.source,\n    method: info.methodName,\n    status: status,\n    elapsedTime: Date.now() - info.startTime\n  });\n}\n\nmodule.exports.addApiData = function (message) {\n  var metricName = getMetricName(message.route, message.method);\n  // var path = message.route ? message.route.path : undefined;\n\n  updateMetric(NAMESPACES.apiMetrics + '.' + CATEGORIES.all, message.time);\n  updateMetric(NAMESPACES.apiMetrics + '.' + CATEGORIES.statuses + '.' + message.status, message.time);\n  updateMetric(NAMESPACES.apiMetrics + '.' + CATEGORIES.methods + '.' + message.method, message.time);\n  updateMetric(NAMESPACES.apiMetrics + '.' + CATEGORIES.endpoints + '.' + metricName, message.time);\n  updateMetric(NAMESPACES.endpoints + '.' + metricName + '.' + message.status, message.time);\n  endpointsLastResponseTime[metricName] = message.time;\n  addMetric(NAMESPACES.endpoints + '.' + metricName + '.lastResponseTime', \"Gauge\", apiMetric(metricName));\n}\n\nfunction apiMetric(metricName) {\n  return function () {\n    return endpointsLastResponseTime[metricName];\n  }\n}\n\nfunction getMetricName(route, methodName) {\n  return route + '|' + methodName.toLowerCase();\n};\n\nfunction addInnerIO(message) {\n  updateMetric(NAMESPACES.internalMetrics + '.' + message.destination + '.' + CATEGORIES.all, message.elapsedTime);\n  updateMetric(NAMESPACES.internalMetrics + '.' + message.destination + '.' + CATEGORIES.statuses + '.' + message.status, message.elapsedTime);\n  updateMetric(NAMESPACES.internalMetrics + '.' + message.destination + '.' + CATEGORIES.methods + '.' + message.method, message.elapsedTime)\n}\n\nfunction _evtparse(eventName) {\n  var namespaces = eventName.split('.');\n\n  var name1;\n  var levels = namespaces.length;\n  var name = namespaces.pop(),\n    category = namespaces.pop(),\n    namespace = namespaces.pop();\n\n  if (levels == 4) {\n    name1 = name;\n    name = category;\n    category = namespace;\n    namespace = namespaces.pop();\n  }\n\n  return {\n    ns: namespace,\n    name: name,\n    name1: name1,\n    category: category\n  }\n}\n\nfunction addMetric(eventName, metricType, func) {\n  var parts = _evtparse(eventName);\n  var metricsPath;\n\n  if (!trackedMetrics[parts.ns]) {\n    trackedMetrics[parts.ns] = {};\n  }\n  if (!trackedMetrics[parts.ns][parts.category]) {\n    trackedMetrics[parts.ns][parts.category] = {};\n  }\n  if (!trackedMetrics[parts.ns][parts.category][parts.name]) {\n    if (parts.name1) {\n      trackedMetrics[parts.ns][parts.category][parts.name] = {}\n    }\n    else {\n      trackedMetrics[parts.ns][parts.category][parts.name] = metricsFactory.createMetric(metricType, func);\n    }\n  }\n\n  if ((parts.name1) && (!trackedMetrics[parts.ns][parts.category][parts.name][parts.name1])) {\n    trackedMetrics[parts.ns][parts.category][parts.name][parts.name1] = metricsFactory.createMetric(metricType, func);\n  }\n\n  if (parts.name1) {\n    return trackedMetrics[parts.ns][parts.category][parts.name][parts.name1];\n  }\n  else {\n    return trackedMetrics[parts.ns][parts.category][parts.name];\n  }\n}\n\nfunction updateMetric(name, elapsedTime) {\n  var metric = addMetric(name, \"Timer\");\n  metric.update(elapsedTime);\n}\n\nfunction addProcessMetrics() {\n  memwatch.on('leak', function (info) {\n    trackedMetrics[NAMESPACES.process][\"memory\"][\"leak\"] = info;\n  });\n\n  gc.on('stats', function (stats) {\n    gcLastRun = new Date().getTime();\n    updateMetric(NAMESPACES.process + \".gc.time\", stats.pauseMS);\n    //in bytes\n    updateMetric(NAMESPACES.process + \".gc.releasedMem\", stats.diff.usedHeapSize);\n\n    addMetric(NAMESPACES.process + \".gc.lastRun\", \"Gauge\", gcLastRunMetric);\n  });\n\n  addMetric(NAMESPACES.process + \".cpu.usage\", \"Gauge\", cpuUsageMetric)\n\n  addMetric(NAMESPACES.process + \".memory.usage\", \"Gauge\", memoryUsageMetric);\n\n  addMetric(NAMESPACES.process + \".eventLoop.latency\", \"Gauge\", eventLoopLatencyMetric);\n\n  addMetric(NAMESPACES.process + \".run.uptime\", \"Gauge\", processUpTimeMetric);\n\n  setCpuUsageScheduleJob();\n}\n\nfunction processUpTimeMetric() {\n  //in ms\n  return process.uptime() * 1000;\n}\n\nfunction eventLoopLatencyMetric() {\n  return eventLoopStats.sense();\n}\n\nfunction memoryUsageMetric() {\n  //in bytes\n  return process.memoryUsage();\n}\n\nfunction cpuUsageMetric() {\n  return cpuUsage;\n}\n\nfunction gcLastRunMetric() {\n  return gcLastRun;\n}\n\nfunction setCpuUsageScheduleJob() {\n  if (cpuUsageScheduleJob) {\n    cpuUsageScheduleJob.cancel();\n  }\n  cpuUsageScheduleJob = schedule.scheduleJob('*/1 * * * *', function () {\n    var pid = process.pid;\n    usage.stat(pid, function (err, result) {\n      cpuUsage = result.cpu;\n    });\n  });\n}\n\nfunction resetAll() {\n  resetProcessMetrics();\n  resetMetric(NAMESPACES.apiMetrics);\n  resetMetric(NAMESPACES.internalMetrics);\n  resetMetric(NAMESPACES.endpoints);\n  resetCustomMetrics();\n  resetCustomMetersMetrics();\n\n}\n\nfunction resetCustomMetrics() {\n  for (var customMetricName in customMetrics) {\n    if (customMetrics.hasOwnProperty(customMetricName)) {\n      let customNamespace = customMetricName.substring(0, customMetricName.indexOf(\".\"));\n      resetMetric(customNamespace);\n    }\n  }\n  customMetrics = {};\n}\n\nfunction resetCustomMetersMetrics() {\n  for (var customMetricName of customMetersMetrics) {\n    var metric = addMetric(customMetricName);\n    let customNamespace = customMetricName.substring(0, customMetricName.indexOf(\".\"));\n    resetMetric(customNamespace);\n  }\n}\n\nfunction resetProcessMetrics() {\n  memwatch.removeAllListeners('leak');\n  gc.removeAllListeners('stats');\n  resetMetric(NAMESPACES.process);\n  addProcessMetrics();\n}\n\nfunction resetMetric(namespaceToReset) {\n  delete trackedMetrics[namespaceToReset];\n}\n\naddProcessMetrics();","/home/travis/build/npmtest/node-npmtest-express-node-metrics/node_modules/express-node-metrics/src/factory.js":"'use strict';\nvar measured = require('measured');\n\nmodule.exports.createMetric = function (name, func) {\n    switch (name.toLowerCase()) {\n        case \"timer\":\n            {\n                return new measured.Timer();\n            }\n        case \"counter\":\n            {\n                return new measured.Counter();\n            }\n        case \"meter\":\n        {\n            return new measured.Meter();\n        }\n        case \"gauge\":\n            if (func) {\n                return new measured.Gauge(func);\n            }\n        default:\n            return null;\n    }\n}","/home/travis/build/npmtest/node-npmtest-express-node-metrics/node_modules/express-node-metrics/src/helper.js":"module.exports.getRoute = function (req) {\n    var route = req.baseUrl; //express\n    if (req.swagger) { //swagger\n        route = req.swagger.apiPath;\n    } else if (req.route && route) { //express\n        route = route + req.route.path;\n    } else if (req.url && !route) { //restify\n        route = req.url;\n        if (req.route) { \n            route = req.route.path\n        }\n    }\n\n    return route;\n};\n\nmodule.exports.shouldAddMetrics = function (req) {\n    var should = false;\n    if (req.originalUrl) {\n        should = req.originalUrl.includes('metrics');\n    }\n\n    if (req.url) {\n        should = req.url.includes('metrics');\n    }\n\n    return should;\n};\n"}